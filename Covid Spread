class Pair{
    int x;
    int y;
    int time;
    Pair(int x,int y,int time){
        this.x=x;
        this.y=y;
        this.time=time;
    }
}
class Solution{
     public int helpaterp(int[][] hospital) {
        // code here
        Queue<Pair> q=new LinkedList<>();
        int count=0;
        int m=hospital.length;
        int n=hospital[0].length;
        for(int i=0;i<hospital.length;i++){
            for(int j=0;j<hospital[0].length;j++){
                if(hospital[i][j]==2){
                    q.add(new Pair(i,j,0));
                    hospital[i][j]=0;
                }
                if(hospital[i][j]==1){
                    count++;
                }
            }
        }
        int max=0;
        while(!q.isEmpty()){
            Pair p=q.remove();
            max=Math.max(max,p.time);
            if(p.x+1<m && p.y<n && hospital[p.x+1][p.y]==1){
                q.add(new Pair(p.x+1,p.y,p.time+1));
                hospital[p.x+1][p.y]=0;
                count--;
            }
            if(p.x<m && p.y-1>=0 && hospital[p.x][p.y-1]==1){
                q.add(new Pair(p.x,p.y-1,p.time+1));
                hospital[p.x][p.y-1]=0;
                count--;
            }
            if(p.x-1>=0 && p.y<n && hospital[p.x-1][p.y]==1){
                q.add(new Pair(p.x-1,p.y,p.time+1));
                hospital[p.x-1][p.y]=0;
                count--;
            }
            if(p.x<m && p.y+1<n && hospital[p.x][p.y+1]==1){
                q.add(new Pair(p.x,p.y+1,p.time+1));
                hospital[p.x][p.y+1]=0;
                count--;
            }
        }
        if(count==0)
           return max;
        return -1;
    }
}



link : https://practice.geeksforgeeks.org/problems/269f61832b146dd5e6d89b4ca18cbd2a2654ebbe/1/?category[]=Graph&category[]=Graph&page=1&query=category[]Graphpage1category[]Graph
