class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int mindist(int[] visit,int[] dist,int V){
        int mini=Integer.MAX_VALUE;
        int ind=-1;
        for(int i=0;i<V;i++){
            if(mini>dist[i] && visit[i]==0)
            {
                ind=i;
                mini=dist[i];
            }
        }
        return ind;
    }
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code 
        int dist[]=new int[V];
        int visit[]=new int[V];
        for(int i=0;i<V;i++){
            dist[i]=1000000000;
            visit[i]=0;
        }
        dist[S]=0;
        for(int i=0;i<V-1;i++){
            int u=mindist(visit,dist,V);
            visit[u]=1;
            for(int j=0;j<adj.get(u).size();j++){
                if(visit[adj.get(u).get(j).get(0)]==0){
                    if(dist[adj.get(u).get(j).get(0)]>dist[u]+adj.get(u).get(j).get(1))
                        dist[adj.get(u).get(j).get(0)]=dist[u]+adj.get(u).get(j).get(1);
                }
            }
        }
        return dist;
    }
}



LINK : https://practice.geeksforgeeks.org/problems/implementing-dijkstra-set-1-adjacency-matrix/1/?category[]=Graph&category[]=Graph&page=1&query=category[]Graphpage1category[]Graph
