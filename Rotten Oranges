class Pair{
    int x;
    int y;
    Pair(int x,int y){
        this.x=x;
        this.y=y;
    }
}
class Solution
{
    //Function to find minimum time required to rot all oranges. 
    public int orangesRotting(int[][] grid)
    {
        // Code here
        Queue<Pair> q=new LinkedList<>();
        int ones=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==2){
                    q.add(new Pair(i,j));
                }
                if(grid[i][j]==1)
                   ones++;
            }
        }
        int time=0;
        while(!q.isEmpty()){
            int n=q.size();
            time++;
            for(int i=0;i<n;i++){
                Pair p=q.remove();
                if(p.x-1>=0 && p.y<grid[0].length && grid[p.x-1][p.y]==1){
                    q.add(new Pair(p.x-1,p.y));
                    grid[p.x-1][p.y]=0;
                    ones--;
                }
                if(p.x+1<grid.length && p.y<grid[0].length && grid[p.x+1][p.y]==1){
                    q.add(new Pair(p.x+1,p.y));
                    grid[p.x+1][p.y]=0;
                    ones--;
                }
                if(p.x<grid.length && p.y+1<grid[0].length && grid[p.x][p.y+1]==1){
                    q.add(new Pair(p.x,p.y+1));
                    grid[p.x][p.y+1]=0;
                    ones--;
                }
                if(p.x<grid.length && p.y-1>=0 && grid[p.x][p.y-1]==1){
                    q.add(new Pair(p.x,p.y-1));
                    grid[p.x][p.y-1]=0;
                    ones--;
                }
            }
            if(ones==0)
              return time;
        }
        return -1;
    }
}



LINK : https://practice.geeksforgeeks.org/problems/rotten-oranges2536/1#
