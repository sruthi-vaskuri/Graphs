class Solution
{
    public boolean dfs(char[][] board,int x,int y,int index,String word,boolean[][] visit){
        if(x<0 || x>=board.length || y<0 || y>=board[0].length)
            return false;
        if(index==word.length())
            return true;
        if(word.charAt(index)==board[x][y] && visit[x][y]==false){
            visit[x][y]=true;
           return dfs(board,x+1,y,index+1,word,visit) ||
            dfs(board,x-1,y,index+1,word,visit) || dfs(board,x,y+1,index+1,word,visit) ||
            dfs(board,x,y-1,index+1,word,visit);
        }
        return false;
    }
    public boolean isWordExist(char[][] board, String word)
    {
        // Code here
        boolean visit[][];
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]==word.charAt(0)){
                    visit=new boolean[board.length][board[0].length];
                    if(dfs(board,i,j,0,word,visit))
                       return true;
                }
            }
        }
        return false;
    }
}




link : https://practice.geeksforgeeks.org/problems/word-search/1/?category[]=Graph&category[]=Graph&page=1&query=category[]Graphpage1category[]Graph
